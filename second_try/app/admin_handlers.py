import os
from aiogram import Router, types, Bot, Dispatcher
from aiogram.types import Message, InputFile, CallbackQuery
from aiogram.filters import Command
from aiogram.types import FSInputFile

from app.database.requests import (
    get_orders_summary, get_user_orders_summary, set_discount, update_order_status,
    update_prices, get_prices_for_command, get_all_files, clear_downloads, get_order_user_id, ban_user, unban_user,
    generate_discount_message_admin, generate_discount_message_user, get_discount, getNoneOrders, update_money,
    update_number_of_messages, update_number_of_messages_from_last_order, get_messages_from_last_order, get_id_all_users,
    update_number_of_completed_orders,
)
from app.config import load_config
from io import BytesIO

router = Router()
config = load_config()
bot = Bot(token=config['BOT_TOKEN'])

@router.message(Command("ban"))
async def ban_command(message: Message):
    if message.from_user.id != int(config['ADMIN_CHAT_ID']):
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id>")
        return

    try:
        user_id = int(args[1])
        await ban_user(user_id)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑–±–∞–Ω–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command("unban"))
async def unban_command(message: Message):
    if message.from_user.id != int(config['ADMIN_CHAT_ID']):
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id>")
        return

    try:
        user_id = int(args[1])
        await unban_user(user_id)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        caption = (f"–ü—Ä–æ—à—É –ø—Ä–æ—à–µ–Ω–∏—è, –≤—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –æ—à–∏–±–∫–µüò£ –í –∫–∞—á–µ—Å—Ç–≤–µ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–º –≤–∞–º 5.00 —Ä—É–±–ª–µ–π –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã")
        await update_money(user_id, 5)
        await message.bot.send_message(chat_id=user_id, text=caption)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

@router.message(Command("update_prices"))
async def update_prices_command(message: Message):
    if message.from_user.id != int(config['ADMIN_CHAT_ID']):
        return

    args = message.text.split()
    if len(args) % 2 == 0:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /update_prices <name> <value> [<name> <value> ...]")
        return

    prices = {args[i]: float(args[i+1]) for i in range(1, len(args), 2)}
    await update_prices(prices)
    await message.answer(f"–¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {prices}")

@router.message(Command("get_prices"))
async def get_prices_command(message: Message):
    prices = await get_prices_for_command()
    if message.from_user.id == int(config['ADMIN_CHAT_ID']):
        prices_text = await generate_discount_message_admin(prices)
    else:
        prices_text = await generate_discount_message_user(prices, await get_discount(message.from_user.id))
    await message.answer(f"{prices_text}")

@router.message(Command("orders_summary"))
async def orders_summary(message: Message):
    if message.from_user.id != int(config['ADMIN_CHAT_ID']):
        return

    total_orders, total_income = await get_orders_summary()
    await message.answer(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n–û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_income:.2f} —Ä—É–±–ª–µ–π")


@router.message(Command("user_orders_summary"))
async def user_orders_summary(message: Message):
    if message.from_user.id != int(config['ADMIN_CHAT_ID']):
        return

    user_id = int(message.text.split()[1])
    total_orders, total_income = await get_user_orders_summary(user_id)
    await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {total_orders}\n–î–æ—Ö–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {total_income:.2f} –∫–æ–ø–µ–µ–∫")

@router.message(Command("set_discount"))
async def set_user_discount(message: Message):
    if message.from_user.id != int(config['ADMIN_CHAT_ID']):
        return

    args = message.text.split()
    if len(args) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_discount <user_id> <discount>")
        return

    user_id, discount = int(args[1]), args[2]

    discount = float(discount)
    if await set_discount(user_id, discount):
        await message.answer(f"–°–∫–∏–¥–∫–∞ {discount:.2f} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    else:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏")

# @router.message(Command("get_all_files"))
# async def get_all_files_command(message: Message):
#     if message.from_user.id != int(config['ADMIN_CHAT_ID']):
#         return
#
#     files = get_all_files()
#     for filepath in files:
#         document_file = InputFile(filepath)
#         await message.answer_document(document_file)

@router.message(Command("update_money"))
async def handle_update_money_command(message: types.Message):
    if message.from_user.id != int(config['ADMIN_CHAT_ID']):
        return
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã /update_money user_id new_money_value
        command_args = message.text.split()
        if len(command_args) != 3:
            await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /update_money <username> <new_money_value>")
            return

        user_id = int(command_args[1])
        new_money_value = float(command_args[2])

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è money
        await update_money(user_id, new_money_value)
        await message.reply(f"–ó–Ω–∞—á–µ–Ω–∏–µ money –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å user_id {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_money_value}")
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@router.message(Command("clear_downloads"))
async def clear_downloads_command(message: Message):
    if message.from_user.id != int(config['ADMIN_CHAT_ID']):
        return

    clear_downloads()
    await message.answer("–ü–∞–ø–∫–∞ 'downloads' –æ—á–∏—â–µ–Ω–∞.")

@router.message(Command("need_to_confirm"))
async def NoneOrders(message: Message):
    if message.from_user.id != int(config['ADMIN_CHAT_ID']):
        return
    await message.answer(f"{await getNoneOrders()}")

@router.message(Command("send_message_for_all_users"))
async def send_message_for_all_users(message: Message):
    if message.from_user.id != int(config['ADMIN_CHAT_ID']):
        return

    text = message.text.split()
    if len(text) != 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /send_message_for_all_users <text>")
        return
    textForUsers = text[1]
    users = await get_id_all_users()
    for user in users:
        await message.bot.send_message(user.tg_id, textForUsers)
    await message.reply("–ì–æ—Ç–æ–≤–æ))")

@router.message()
async def handle_reaction(message: Message):

    if message.from_user.id != int(config['ADMIN_CHAT_ID']):
        await update_number_of_messages(message.from_user.id)
        await update_number_of_messages_from_last_order(message.from_user.id)

        if await get_messages_from_last_order(message.from_user.id) % 3 == 2:
            caption = ('–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑" –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞. '
                '–ò–Ω–æ–≥–¥–∞ —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –∏ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –∫–≤–∞–¥—Ä–∞—Ç —Å 4 —Ç–æ—á–∫–∞–º–∏ —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ". '
               '\n\n'
                '–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /help')
            photo = FSInputFile("photo1.jpg")

            await message.answer_photo(photo=photo, caption=caption)

        return

    bot_user = await bot.get_me()
    if message.reply_to_message and message.reply_to_message.from_user.id == bot_user.id:
        text = message.text.split()
        order_id = int(text[0])  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ ID –∑–∞–∫–∞–∑–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_id = await get_order_user_id(order_id)
        if user_id:
            result = await update_order_status(order_id, 'completed')
            if len(text) > 1:
                await message.answer(f"–¢–∏—Ö–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ))\n–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
                await update_number_of_completed_orders(user_id)
            else:
                if result == 1:
                    await message.bot.send_message(user_id,
                                                   f"–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ!\n–ñ–¥—ë–º –≤–∞—Å –≤ –∫–æ–º–Ω–∞—Ç–µ 1204–∞")
                    await message.answer(f"–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
                    await update_number_of_completed_orders(user_id)
                elif result == 2:
                    await message.answer(f"–ó–∞–∫–∞–∑ #{order_id} —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
                elif result == 0:
                    await message.answer(f"–ó–∞–∫–∞–∑ #{order_id} –±—ã–ª –æ—Ç–º–µ–Ω—ë—Ç. –Ø –Ω–µ –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã–º")
                    await update_number_of_completed_orders(user_id)






def register_admin_handlers(dp: Dispatcher):
    dp.include_router(router)